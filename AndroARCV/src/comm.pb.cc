// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "comm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace androar {

namespace {

const ::google::protobuf::Descriptor* AuthentificationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthentificationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ClientMessage_ClientMessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* AuthentificationNewKey_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AuthentificationNewKey_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServerMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServerMessage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ServerMessage_ServerMessageType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* OpenCVRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenCVRequest_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* OpenCVRequest_RequestType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_comm_2eproto() {
  protobuf_AddDesc_comm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "comm.proto");
  GOOGLE_CHECK(file != NULL);
  AuthentificationInfo_descriptor_ = file->message_type(0);
  static const int AuthentificationInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthentificationInfo, phone_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthentificationInfo, hash_),
  };
  AuthentificationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthentificationInfo_descriptor_,
      AuthentificationInfo::default_instance_,
      AuthentificationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthentificationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthentificationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthentificationInfo));
  ClientMessage_descriptor_ = file->message_type(1);
  static const int ClientMessage_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, authentification_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, image_to_process_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, images_to_store_),
  };
  ClientMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientMessage_descriptor_,
      ClientMessage::default_instance_,
      ClientMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientMessage));
  ClientMessage_ClientMessageType_descriptor_ = ClientMessage_descriptor_->enum_type(0);
  AuthentificationNewKey_descriptor_ = file->message_type(2);
  static const int AuthentificationNewKey_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthentificationNewKey, new_hash_),
  };
  AuthentificationNewKey_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AuthentificationNewKey_descriptor_,
      AuthentificationNewKey::default_instance_,
      AuthentificationNewKey_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthentificationNewKey, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AuthentificationNewKey, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AuthentificationNewKey));
  ServerMessage_descriptor_ = file->message_type(3);
  static const int ServerMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, message_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, authentification_new_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, processed_image_),
  };
  ServerMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ServerMessage_descriptor_,
      ServerMessage::default_instance_,
      ServerMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServerMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ServerMessage));
  ServerMessage_ServerMessageType_descriptor_ = ServerMessage_descriptor_->enum_type(0);
  OpenCVRequest_descriptor_ = file->message_type(4);
  static const int OpenCVRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenCVRequest, request_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenCVRequest, image_contents_),
  };
  OpenCVRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenCVRequest_descriptor_,
      OpenCVRequest::default_instance_,
      OpenCVRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenCVRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenCVRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenCVRequest));
  OpenCVRequest_RequestType_descriptor_ = OpenCVRequest_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_comm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthentificationInfo_descriptor_, &AuthentificationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientMessage_descriptor_, &ClientMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AuthentificationNewKey_descriptor_, &AuthentificationNewKey::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ServerMessage_descriptor_, &ServerMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenCVRequest_descriptor_, &OpenCVRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_comm_2eproto() {
  delete AuthentificationInfo::default_instance_;
  delete AuthentificationInfo_reflection_;
  delete ClientMessage::default_instance_;
  delete ClientMessage_reflection_;
  delete AuthentificationNewKey::default_instance_;
  delete AuthentificationNewKey_reflection_;
  delete ServerMessage::default_instance_;
  delete ServerMessage_reflection_;
  delete OpenCVRequest::default_instance_;
  delete OpenCVRequest_reflection_;
}

void protobuf_AddDesc_comm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::androar::protobuf_AddDesc_image_5ffeatures_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncomm.proto\022\007androar\032\024image_features.pr"
    "oto\"6\n\024AuthentificationInfo\022\020\n\010phone_id\030"
    "\001 \002(\t\022\014\n\004hash\030\002 \002(\t\"\301\002\n\rClientMessage\022<\n"
    "\025authentification_info\030\001 \002(\0132\035.androar.A"
    "uthentificationInfo\022>\n\014message_type\030\002 \002("
    "\0162(.androar.ClientMessage.ClientMessageT"
    "ype\022(\n\020image_to_process\030\n \001(\0132\016.androar."
    "Image\022\'\n\017images_to_store\030\013 \003(\0132\016.androar"
    ".Image\"_\n\021ClientMessageType\022\r\n\tUNDEFINED"
    "\020\001\022\024\n\020IMAGE_TO_PROCESS\020\002\022\023\n\017IMAGES_TO_ST"
    "ORE\020\003\022\020\n\014LAST_MESSAGE\020\004\"*\n\026Authentificat"
    "ionNewKey\022\020\n\010new_hash\030\001 \002(\t\"\325\002\n\rServerMe"
    "ssage\022>\n\014message_type\030\001 \002(\0162(.androar.Se"
    "rverMessage.ServerMessageType\022A\n\030authent"
    "ification_new_key\030\016 \001(\0132\037.androar.Authen"
    "tificationNewKey\022\'\n\017processed_image\030\017 \001("
    "\0132\016.androar.Image\"\227\001\n\021ServerMessageType\022"
    "\r\n\tUNDEFINED\020\001\022\021\n\rHELLO_MESSAGE\020\002\022\033\n\027AUT"
    "HENTIFICATION_DENIED\020\003\022\034\n\030AUTHENTIFICATI"
    "ON_NEW_KEY\020\004\022\023\n\017IMAGE_PROCESSED\020\005\022\020\n\014LAS"
    "T_MESSAGE\020\006\"\226\001\n\rOpenCVRequest\0228\n\014request"
    "_type\030\001 \002(\0162\".androar.OpenCVRequest.Requ"
    "estType\022&\n\016image_contents\030\002 \002(\0132\016.androa"
    "r.Image\"#\n\013RequestType\022\t\n\005STORE\020\001\022\t\n\005QUE"
    "RY\020\002B\'\n\020com.androar.commB\023CommunicationP"
    "rotos", 1005);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comm.proto", &protobuf_RegisterTypes);
  AuthentificationInfo::default_instance_ = new AuthentificationInfo();
  ClientMessage::default_instance_ = new ClientMessage();
  AuthentificationNewKey::default_instance_ = new AuthentificationNewKey();
  ServerMessage::default_instance_ = new ServerMessage();
  OpenCVRequest::default_instance_ = new OpenCVRequest();
  AuthentificationInfo::default_instance_->InitAsDefaultInstance();
  ClientMessage::default_instance_->InitAsDefaultInstance();
  AuthentificationNewKey::default_instance_->InitAsDefaultInstance();
  ServerMessage::default_instance_->InitAsDefaultInstance();
  OpenCVRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_comm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_comm_2eproto {
  StaticDescriptorInitializer_comm_2eproto() {
    protobuf_AddDesc_comm_2eproto();
  }
} static_descriptor_initializer_comm_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int AuthentificationInfo::kPhoneIdFieldNumber;
const int AuthentificationInfo::kHashFieldNumber;
#endif  // !_MSC_VER

AuthentificationInfo::AuthentificationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthentificationInfo::InitAsDefaultInstance() {
}

AuthentificationInfo::AuthentificationInfo(const AuthentificationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthentificationInfo::SharedCtor() {
  _cached_size_ = 0;
  phone_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthentificationInfo::~AuthentificationInfo() {
  SharedDtor();
}

void AuthentificationInfo::SharedDtor() {
  if (phone_id_ != &::google::protobuf::internal::kEmptyString) {
    delete phone_id_;
  }
  if (hash_ != &::google::protobuf::internal::kEmptyString) {
    delete hash_;
  }
  if (this != default_instance_) {
  }
}

void AuthentificationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthentificationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthentificationInfo_descriptor_;
}

const AuthentificationInfo& AuthentificationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

AuthentificationInfo* AuthentificationInfo::default_instance_ = NULL;

AuthentificationInfo* AuthentificationInfo::New() const {
  return new AuthentificationInfo;
}

void AuthentificationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_phone_id()) {
      if (phone_id_ != &::google::protobuf::internal::kEmptyString) {
        phone_id_->clear();
      }
    }
    if (has_hash()) {
      if (hash_ != &::google::protobuf::internal::kEmptyString) {
        hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthentificationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string phone_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_phone_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->phone_id().data(), this->phone_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_hash;
        break;
      }
      
      // required string hash = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hash:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->hash().data(), this->hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthentificationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string phone_id = 1;
  if (has_phone_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_id().data(), this->phone_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->phone_id(), output);
  }
  
  // required string hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->hash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthentificationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string phone_id = 1;
  if (has_phone_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->phone_id().data(), this->phone_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->phone_id(), target);
  }
  
  // required string hash = 2;
  if (has_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->hash().data(), this->hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->hash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthentificationInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string phone_id = 1;
    if (has_phone_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->phone_id());
    }
    
    // required string hash = 2;
    if (has_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->hash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthentificationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthentificationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthentificationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthentificationInfo::MergeFrom(const AuthentificationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_phone_id()) {
      set_phone_id(from.phone_id());
    }
    if (from.has_hash()) {
      set_hash(from.hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthentificationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthentificationInfo::CopyFrom(const AuthentificationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthentificationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void AuthentificationInfo::Swap(AuthentificationInfo* other) {
  if (other != this) {
    std::swap(phone_id_, other->phone_id_);
    std::swap(hash_, other->hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthentificationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthentificationInfo_descriptor_;
  metadata.reflection = AuthentificationInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ClientMessage_ClientMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_ClientMessageType_descriptor_;
}
bool ClientMessage_ClientMessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ClientMessage_ClientMessageType ClientMessage::UNDEFINED;
const ClientMessage_ClientMessageType ClientMessage::IMAGE_TO_PROCESS;
const ClientMessage_ClientMessageType ClientMessage::IMAGES_TO_STORE;
const ClientMessage_ClientMessageType ClientMessage::LAST_MESSAGE;
const ClientMessage_ClientMessageType ClientMessage::ClientMessageType_MIN;
const ClientMessage_ClientMessageType ClientMessage::ClientMessageType_MAX;
const int ClientMessage::ClientMessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ClientMessage::kAuthentificationInfoFieldNumber;
const int ClientMessage::kMessageTypeFieldNumber;
const int ClientMessage::kImageToProcessFieldNumber;
const int ClientMessage::kImagesToStoreFieldNumber;
#endif  // !_MSC_VER

ClientMessage::ClientMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientMessage::InitAsDefaultInstance() {
  authentification_info_ = const_cast< ::androar::AuthentificationInfo*>(&::androar::AuthentificationInfo::default_instance());
  image_to_process_ = const_cast< ::androar::Image*>(&::androar::Image::default_instance());
}

ClientMessage::ClientMessage(const ClientMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientMessage::SharedCtor() {
  _cached_size_ = 0;
  authentification_info_ = NULL;
  message_type_ = 1;
  image_to_process_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientMessage::~ClientMessage() {
  SharedDtor();
}

void ClientMessage::SharedDtor() {
  if (this != default_instance_) {
    delete authentification_info_;
    delete image_to_process_;
  }
}

void ClientMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientMessage_descriptor_;
}

const ClientMessage& ClientMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

ClientMessage* ClientMessage::default_instance_ = NULL;

ClientMessage* ClientMessage::New() const {
  return new ClientMessage;
}

void ClientMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_authentification_info()) {
      if (authentification_info_ != NULL) authentification_info_->::androar::AuthentificationInfo::Clear();
    }
    message_type_ = 1;
    if (has_image_to_process()) {
      if (image_to_process_ != NULL) image_to_process_->::androar::Image::Clear();
    }
  }
  images_to_store_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .androar.AuthentificationInfo authentification_info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authentification_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_message_type;
        break;
      }
      
      // required .androar.ClientMessage.ClientMessageType message_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_message_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::androar::ClientMessage_ClientMessageType_IsValid(value)) {
            set_message_type(static_cast< ::androar::ClientMessage_ClientMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_image_to_process;
        break;
      }
      
      // optional .androar.Image image_to_process = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_to_process:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_to_process()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_images_to_store;
        break;
      }
      
      // repeated .androar.Image images_to_store = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_images_to_store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_images_to_store()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_images_to_store;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .androar.AuthentificationInfo authentification_info = 1;
  if (has_authentification_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->authentification_info(), output);
  }
  
  // required .androar.ClientMessage.ClientMessageType message_type = 2;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->message_type(), output);
  }
  
  // optional .androar.Image image_to_process = 10;
  if (has_image_to_process()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->image_to_process(), output);
  }
  
  // repeated .androar.Image images_to_store = 11;
  for (int i = 0; i < this->images_to_store_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->images_to_store(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .androar.AuthentificationInfo authentification_info = 1;
  if (has_authentification_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->authentification_info(), target);
  }
  
  // required .androar.ClientMessage.ClientMessageType message_type = 2;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->message_type(), target);
  }
  
  // optional .androar.Image image_to_process = 10;
  if (has_image_to_process()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->image_to_process(), target);
  }
  
  // repeated .androar.Image images_to_store = 11;
  for (int i = 0; i < this->images_to_store_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->images_to_store(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .androar.AuthentificationInfo authentification_info = 1;
    if (has_authentification_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authentification_info());
    }
    
    // required .androar.ClientMessage.ClientMessageType message_type = 2;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
    }
    
    // optional .androar.Image image_to_process = 10;
    if (has_image_to_process()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_to_process());
    }
    
  }
  // repeated .androar.Image images_to_store = 11;
  total_size += 1 * this->images_to_store_size();
  for (int i = 0; i < this->images_to_store_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->images_to_store(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientMessage::MergeFrom(const ClientMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  images_to_store_.MergeFrom(from.images_to_store_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_authentification_info()) {
      mutable_authentification_info()->::androar::AuthentificationInfo::MergeFrom(from.authentification_info());
    }
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_image_to_process()) {
      mutable_image_to_process()->::androar::Image::MergeFrom(from.image_to_process());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientMessage::CopyFrom(const ClientMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_authentification_info()) {
    if (!this->authentification_info().IsInitialized()) return false;
  }
  if (has_image_to_process()) {
    if (!this->image_to_process().IsInitialized()) return false;
  }
  for (int i = 0; i < images_to_store_size(); i++) {
    if (!this->images_to_store(i).IsInitialized()) return false;
  }
  return true;
}

void ClientMessage::Swap(ClientMessage* other) {
  if (other != this) {
    std::swap(authentification_info_, other->authentification_info_);
    std::swap(message_type_, other->message_type_);
    std::swap(image_to_process_, other->image_to_process_);
    images_to_store_.Swap(&other->images_to_store_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientMessage_descriptor_;
  metadata.reflection = ClientMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AuthentificationNewKey::kNewHashFieldNumber;
#endif  // !_MSC_VER

AuthentificationNewKey::AuthentificationNewKey()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AuthentificationNewKey::InitAsDefaultInstance() {
}

AuthentificationNewKey::AuthentificationNewKey(const AuthentificationNewKey& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AuthentificationNewKey::SharedCtor() {
  _cached_size_ = 0;
  new_hash_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AuthentificationNewKey::~AuthentificationNewKey() {
  SharedDtor();
}

void AuthentificationNewKey::SharedDtor() {
  if (new_hash_ != &::google::protobuf::internal::kEmptyString) {
    delete new_hash_;
  }
  if (this != default_instance_) {
  }
}

void AuthentificationNewKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AuthentificationNewKey::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AuthentificationNewKey_descriptor_;
}

const AuthentificationNewKey& AuthentificationNewKey::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

AuthentificationNewKey* AuthentificationNewKey::default_instance_ = NULL;

AuthentificationNewKey* AuthentificationNewKey::New() const {
  return new AuthentificationNewKey;
}

void AuthentificationNewKey::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_new_hash()) {
      if (new_hash_ != &::google::protobuf::internal::kEmptyString) {
        new_hash_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AuthentificationNewKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string new_hash = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_hash()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->new_hash().data(), this->new_hash().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AuthentificationNewKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string new_hash = 1;
  if (has_new_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_hash().data(), this->new_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->new_hash(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AuthentificationNewKey::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string new_hash = 1;
  if (has_new_hash()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->new_hash().data(), this->new_hash().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->new_hash(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AuthentificationNewKey::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string new_hash = 1;
    if (has_new_hash()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->new_hash());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AuthentificationNewKey::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AuthentificationNewKey* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AuthentificationNewKey*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AuthentificationNewKey::MergeFrom(const AuthentificationNewKey& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_new_hash()) {
      set_new_hash(from.new_hash());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AuthentificationNewKey::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AuthentificationNewKey::CopyFrom(const AuthentificationNewKey& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthentificationNewKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void AuthentificationNewKey::Swap(AuthentificationNewKey* other) {
  if (other != this) {
    std::swap(new_hash_, other->new_hash_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AuthentificationNewKey::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AuthentificationNewKey_descriptor_;
  metadata.reflection = AuthentificationNewKey_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ServerMessage_ServerMessageType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessage_ServerMessageType_descriptor_;
}
bool ServerMessage_ServerMessageType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ServerMessage_ServerMessageType ServerMessage::UNDEFINED;
const ServerMessage_ServerMessageType ServerMessage::HELLO_MESSAGE;
const ServerMessage_ServerMessageType ServerMessage::AUTHENTIFICATION_DENIED;
const ServerMessage_ServerMessageType ServerMessage::AUTHENTIFICATION_NEW_KEY;
const ServerMessage_ServerMessageType ServerMessage::IMAGE_PROCESSED;
const ServerMessage_ServerMessageType ServerMessage::LAST_MESSAGE;
const ServerMessage_ServerMessageType ServerMessage::ServerMessageType_MIN;
const ServerMessage_ServerMessageType ServerMessage::ServerMessageType_MAX;
const int ServerMessage::ServerMessageType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ServerMessage::kMessageTypeFieldNumber;
const int ServerMessage::kAuthentificationNewKeyFieldNumber;
const int ServerMessage::kProcessedImageFieldNumber;
#endif  // !_MSC_VER

ServerMessage::ServerMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ServerMessage::InitAsDefaultInstance() {
  authentification_new_key_ = const_cast< ::androar::AuthentificationNewKey*>(&::androar::AuthentificationNewKey::default_instance());
  processed_image_ = const_cast< ::androar::Image*>(&::androar::Image::default_instance());
}

ServerMessage::ServerMessage(const ServerMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ServerMessage::SharedCtor() {
  _cached_size_ = 0;
  message_type_ = 1;
  authentification_new_key_ = NULL;
  processed_image_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ServerMessage::~ServerMessage() {
  SharedDtor();
}

void ServerMessage::SharedDtor() {
  if (this != default_instance_) {
    delete authentification_new_key_;
    delete processed_image_;
  }
}

void ServerMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServerMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServerMessage_descriptor_;
}

const ServerMessage& ServerMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

ServerMessage* ServerMessage::default_instance_ = NULL;

ServerMessage* ServerMessage::New() const {
  return new ServerMessage;
}

void ServerMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    message_type_ = 1;
    if (has_authentification_new_key()) {
      if (authentification_new_key_ != NULL) authentification_new_key_->::androar::AuthentificationNewKey::Clear();
    }
    if (has_processed_image()) {
      if (processed_image_ != NULL) processed_image_->::androar::Image::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ServerMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .androar.ServerMessage.ServerMessageType message_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::androar::ServerMessage_ServerMessageType_IsValid(value)) {
            set_message_type(static_cast< ::androar::ServerMessage_ServerMessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_authentification_new_key;
        break;
      }
      
      // optional .androar.AuthentificationNewKey authentification_new_key = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authentification_new_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_authentification_new_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_processed_image;
        break;
      }
      
      // optional .androar.Image processed_image = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_processed_image:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processed_image()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ServerMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .androar.ServerMessage.ServerMessageType message_type = 1;
  if (has_message_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->message_type(), output);
  }
  
  // optional .androar.AuthentificationNewKey authentification_new_key = 14;
  if (has_authentification_new_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->authentification_new_key(), output);
  }
  
  // optional .androar.Image processed_image = 15;
  if (has_processed_image()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->processed_image(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ServerMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .androar.ServerMessage.ServerMessageType message_type = 1;
  if (has_message_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->message_type(), target);
  }
  
  // optional .androar.AuthentificationNewKey authentification_new_key = 14;
  if (has_authentification_new_key()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->authentification_new_key(), target);
  }
  
  // optional .androar.Image processed_image = 15;
  if (has_processed_image()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->processed_image(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ServerMessage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .androar.ServerMessage.ServerMessageType message_type = 1;
    if (has_message_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->message_type());
    }
    
    // optional .androar.AuthentificationNewKey authentification_new_key = 14;
    if (has_authentification_new_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->authentification_new_key());
    }
    
    // optional .androar.Image processed_image = 15;
    if (has_processed_image()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->processed_image());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ServerMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ServerMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ServerMessage::MergeFrom(const ServerMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_message_type()) {
      set_message_type(from.message_type());
    }
    if (from.has_authentification_new_key()) {
      mutable_authentification_new_key()->::androar::AuthentificationNewKey::MergeFrom(from.authentification_new_key());
    }
    if (from.has_processed_image()) {
      mutable_processed_image()->::androar::Image::MergeFrom(from.processed_image());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ServerMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerMessage::CopyFrom(const ServerMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_authentification_new_key()) {
    if (!this->authentification_new_key().IsInitialized()) return false;
  }
  if (has_processed_image()) {
    if (!this->processed_image().IsInitialized()) return false;
  }
  return true;
}

void ServerMessage::Swap(ServerMessage* other) {
  if (other != this) {
    std::swap(message_type_, other->message_type_);
    std::swap(authentification_new_key_, other->authentification_new_key_);
    std::swap(processed_image_, other->processed_image_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ServerMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServerMessage_descriptor_;
  metadata.reflection = ServerMessage_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* OpenCVRequest_RequestType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenCVRequest_RequestType_descriptor_;
}
bool OpenCVRequest_RequestType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const OpenCVRequest_RequestType OpenCVRequest::STORE;
const OpenCVRequest_RequestType OpenCVRequest::QUERY;
const OpenCVRequest_RequestType OpenCVRequest::RequestType_MIN;
const OpenCVRequest_RequestType OpenCVRequest::RequestType_MAX;
const int OpenCVRequest::RequestType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int OpenCVRequest::kRequestTypeFieldNumber;
const int OpenCVRequest::kImageContentsFieldNumber;
#endif  // !_MSC_VER

OpenCVRequest::OpenCVRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenCVRequest::InitAsDefaultInstance() {
  image_contents_ = const_cast< ::androar::Image*>(&::androar::Image::default_instance());
}

OpenCVRequest::OpenCVRequest(const OpenCVRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenCVRequest::SharedCtor() {
  _cached_size_ = 0;
  request_type_ = 1;
  image_contents_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenCVRequest::~OpenCVRequest() {
  SharedDtor();
}

void OpenCVRequest::SharedDtor() {
  if (this != default_instance_) {
    delete image_contents_;
  }
}

void OpenCVRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenCVRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenCVRequest_descriptor_;
}

const OpenCVRequest& OpenCVRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comm_2eproto();  return *default_instance_;
}

OpenCVRequest* OpenCVRequest::default_instance_ = NULL;

OpenCVRequest* OpenCVRequest::New() const {
  return new OpenCVRequest;
}

void OpenCVRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    request_type_ = 1;
    if (has_image_contents()) {
      if (image_contents_ != NULL) image_contents_->::androar::Image::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenCVRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .androar.OpenCVRequest.RequestType request_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::androar::OpenCVRequest_RequestType_IsValid(value)) {
            set_request_type(static_cast< ::androar::OpenCVRequest_RequestType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_image_contents;
        break;
      }
      
      // required .androar.Image image_contents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_image_contents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image_contents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OpenCVRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .androar.OpenCVRequest.RequestType request_type = 1;
  if (has_request_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->request_type(), output);
  }
  
  // required .androar.Image image_contents = 2;
  if (has_image_contents()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->image_contents(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenCVRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .androar.OpenCVRequest.RequestType request_type = 1;
  if (has_request_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->request_type(), target);
  }
  
  // required .androar.Image image_contents = 2;
  if (has_image_contents()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->image_contents(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenCVRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .androar.OpenCVRequest.RequestType request_type = 1;
    if (has_request_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->request_type());
    }
    
    // required .androar.Image image_contents = 2;
    if (has_image_contents()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->image_contents());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenCVRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenCVRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenCVRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenCVRequest::MergeFrom(const OpenCVRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_type()) {
      set_request_type(from.request_type());
    }
    if (from.has_image_contents()) {
      mutable_image_contents()->::androar::Image::MergeFrom(from.image_contents());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenCVRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenCVRequest::CopyFrom(const OpenCVRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenCVRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_image_contents()) {
    if (!this->image_contents().IsInitialized()) return false;
  }
  return true;
}

void OpenCVRequest::Swap(OpenCVRequest* other) {
  if (other != this) {
    std::swap(request_type_, other->request_type_);
    std::swap(image_contents_, other->image_contents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenCVRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenCVRequest_descriptor_;
  metadata.reflection = OpenCVRequest_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace androar

// @@protoc_insertion_point(global_scope)
